/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -p QPackageKitInterface -c QPackageKitInterface pk-interface.xml org.freedesktop.PackageKit
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech ASA. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QPACKAGEKITINTERFACE_H_1193340738
#define QPACKAGEKITINTERFACE_H_1193340738

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.PackageKit
 */
class QPackageKitInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.PackageKit"; }

public:
    QPackageKitInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QPackageKitInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> Cancel(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("Cancel"), argumentList);
    }

    inline QDBusReply<QString> GetActions()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetActions"), argumentList);
    }

    inline QDBusReply<QString> GetBackendDetail(QString &author, QString &version)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetBackendDetail"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            author = qdbus_cast<QString>(reply.arguments().at(1));
            version = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusReply<void> GetDepends(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetDepends"), argumentList);
    }

    inline QDBusReply<void> GetDescription(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetDescription"), argumentList);
    }

    inline QDBusReply<QString> GetFilters()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetFilters"), argumentList);
    }

    inline QDBusReply<QString> GetGroups()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetGroups"), argumentList);
    }

    inline QDBusReply<void> GetOldTransactions(const QString &tid, uint number)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(number);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetOldTransactions"), argumentList);
    }

    inline QDBusReply<QString> GetPackage(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetPackage"), argumentList);
    }

    inline QDBusReply<uint> GetProgress(const QString &tid, uint &subpercentage, uint &elapsed, uint &remaining)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetProgress"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 4) {
            subpercentage = qdbus_cast<uint>(reply.arguments().at(1));
            elapsed = qdbus_cast<uint>(reply.arguments().at(2));
            remaining = qdbus_cast<uint>(reply.arguments().at(3));
        }
        return reply;
    }

    inline QDBusReply<void> GetRepoList(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetRepoList"), argumentList);
    }

    inline QDBusReply<void> GetRequires(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetRequires"), argumentList);
    }

    inline QDBusReply<QString> GetRole(const QString &tid, QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetRole"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            package_id = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusReply<QString> GetStatus(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetStatus"), argumentList);
    }

    inline QDBusReply<QString> GetTid()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetTid"), argumentList);
    }

    inline QDBusReply<QStringList> GetTransactionList()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("GetTransactionList"), argumentList);
    }

    inline QDBusReply<void> GetUpdateDetail(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetUpdateDetail"), argumentList);
    }

    inline QDBusReply<void> GetUpdates(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("GetUpdates"), argumentList);
    }

    inline QDBusReply<void> InstallFile(const QString &tid, const QString &full_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(full_path);
        return callWithArgumentList(QDBus::Block, QLatin1String("InstallFile"), argumentList);
    }

    inline QDBusReply<void> InstallPackage(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("InstallPackage"), argumentList);
    }

    inline QDBusReply<void> RefreshCache(const QString &tid, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(force);
        return callWithArgumentList(QDBus::Block, QLatin1String("RefreshCache"), argumentList);
    }

    inline QDBusReply<void> RemovePackage(const QString &tid, const QString &package_id, bool allow_deps)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id) << qVariantFromValue(allow_deps);
        return callWithArgumentList(QDBus::Block, QLatin1String("RemovePackage"), argumentList);
    }

    inline QDBusReply<void> RepoEnable(const QString &tid, const QString &repo_id, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(repo_id) << qVariantFromValue(enabled);
        return callWithArgumentList(QDBus::Block, QLatin1String("RepoEnable"), argumentList);
    }

    inline QDBusReply<void> RepoSetData(const QString &tid, const QString &repo_id, const QString &parameter, const QString &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(repo_id) << qVariantFromValue(parameter) << qVariantFromValue(value);
        return callWithArgumentList(QDBus::Block, QLatin1String("RepoSetData"), argumentList);
    }

    inline QDBusReply<void> Resolve(const QString &tid, const QString &filter, const QString &package)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(filter) << qVariantFromValue(package);
        return callWithArgumentList(QDBus::Block, QLatin1String("Resolve"), argumentList);
    }

    inline QDBusReply<void> Rollback(const QString &tid, const QString &transaction_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(transaction_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("Rollback"), argumentList);
    }

    inline QDBusReply<void> SearchDetails(const QString &tid, const QString &filter, const QString &search)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(filter) << qVariantFromValue(search);
        return callWithArgumentList(QDBus::Block, QLatin1String("SearchDetails"), argumentList);
    }

    inline QDBusReply<void> SearchFile(const QString &tid, const QString &filter, const QString &search)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(filter) << qVariantFromValue(search);
        return callWithArgumentList(QDBus::Block, QLatin1String("SearchFile"), argumentList);
    }

    inline QDBusReply<void> SearchGroup(const QString &tid, const QString &filter, const QString &search)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(filter) << qVariantFromValue(search);
        return callWithArgumentList(QDBus::Block, QLatin1String("SearchGroup"), argumentList);
    }

    inline QDBusReply<void> SearchName(const QString &tid, const QString &filter, const QString &search)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(filter) << qVariantFromValue(search);
        return callWithArgumentList(QDBus::Block, QLatin1String("SearchName"), argumentList);
    }

    inline QDBusReply<void> UpdatePackage(const QString &tid, const QString &package_id)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid) << qVariantFromValue(package_id);
        return callWithArgumentList(QDBus::Block, QLatin1String("UpdatePackage"), argumentList);
    }

    inline QDBusReply<void> UpdateSystem(const QString &tid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(tid);
        return callWithArgumentList(QDBus::Block, QLatin1String("UpdateSystem"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AllowInterrupt(const QString &tid, bool allow_kill);
    void Description(const QString &tid, const QString &package_id, const QString &licence, const QString &group, const QString &detail, const QString &url, qulonglong size, const QString &file_list);
    void ErrorCode(const QString &tid, const QString &code, const QString &details);
    void Finished(const QString &tid, const QString &status, uint runtime);
    void Locked(bool is_locked);
    void Package(const QString &tid, const QString &info, const QString &package_id, const QString &summary);
    void ProgressChanged(const QString &tid, uint percentage, uint subpercentage, uint elapsed, uint remaining);
    void RepoDetail(const QString &tid, const QString &repo_id, const QString &description, bool enabled);
    void RepoSignatureRequired(const QString &tid, const QString &repository_name, const QString &key_url, const QString &key_userid, const QString &key_id, const QString &key_fingerprint, const QString &key_timestamp, const QString &type);
    void RequireRestart(const QString &tid, const QString &type, const QString &details);
    void Transaction(const QString &tid, const QString &old_tid, const QString &timespec, bool succeeded, const QString &role, uint duration, const QString &data);
    void TransactionListChanged(const QStringList &transactions);
    void TransactionStatusChanged(const QString &tid, const QString &status);
    void UpdateDetail(const QString &tid, const QString &package_id, const QString &updates, const QString &obsoletes, const QString &url, const QString &restart, const QString &update_text);
    void UpdatesChanged(const QString &tid);
};

namespace org {
  namespace freedesktop {
    typedef ::QPackageKitInterface PackageKit;
  }
}
#endif
